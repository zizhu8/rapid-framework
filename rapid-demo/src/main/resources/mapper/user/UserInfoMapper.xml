<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN"
"http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd">


<!-- 不使用namespace的话sql搜索定位会比较方便 -->
<mapper namespace="UserInfo">

	<resultMap id="RM.UserInfo" type="com.company.project.user.model.UserInfo">
        <result property="userId" column="user_id"/>
        <result property="username" column="username"/>
        <result property="password" column="password"/>
        <result property="birthDate" column="birth_date"/>
        <result property="sex" column="sex"/>
        <result property="age" column="age"/>
	</resultMap>
	
	<!-- 用于select查询公用抽取的列 -->
	<sql id="UserInfo.columns">
	    <![CDATA[
		user_id,username,password,birth_date,sex,age
	    ]]>
	</sql>

	<!-- useGeneratedKeys="true" keyProperty="xxx" for sqlserver and mysql -->
	<insert id="UserInfo.insert" useGeneratedKeys="true" keyProperty="userId">
    <![CDATA[
        INSERT INTO user_info (
         user_id, username, password, birth_date, sex, age
        ) VALUES (
         #{userId}, #{username}, #{password}, #{birthDate}, #{sex}, #{age}        
        )
    ]]>
		<!--	
			oracle: order="BEFORE" SELECT sequenceName.nextval AS ID FROM DUAL 
			DB2: order="BEFORE"" values nextval for sequenceName
		<selectKey resultType="java.lang.Long" order="BEFORE" keyProperty="userId">
			SELECT sequenceName.nextval AS ID FROM DUAL 
        </selectKey>
		-->
	</insert>
    
	<update id="UserInfo.update" >
    <![CDATA[
        UPDATE user_info SET
	        username = #{username} , password = #{password} , birth_date = #{birthDate} , sex = #{sex} , age = #{age}  
        WHERE 
        	user_id = #{userId}  	        
    ]]>
	</update>

    <delete id="UserInfo.delete">
    <![CDATA[
        DELETE FROM user_info WHERE
        user_id = #{id} 
    ]]>
    </delete>
    
    <select id="UserInfo.getById" resultMap="RM.UserInfo">
		SELECT <include refid="UserInfo.columns" />
	    <![CDATA[
		    FROM user_info 
	        WHERE 
		        user_id = #{id} 
	    ]]>
	</select>
	
	<sql id="UserInfo.findPage.where">
		<!-- ognl访问静态方法的表达式 为@class@method(args),以下为调用rapid中的Ognl.isNotEmpty()方法,还有其它方法如isNotBlank()可以使用，具体请查看Ognl类 -->
		<where>	      				
	       <if test="@Ognl@isNotEmpty(userId)">
				AND user_id = #{userId}
			</if>
	       <if test="@Ognl@isNotEmpty(username)">
				AND username = #{username}
			</if>
	       <if test="@Ognl@isNotEmpty(password)">
				AND password = #{password}
			</if>
	       <if test="@Ognl@isNotEmpty(birthDateBegin)">
				AND birth_date >= #{birthDateBegin}
		   </if>
		   <if test="@Ognl@isNotEmpty(birthDateEnd)">
				AND birth_date &lt;= #{birthDateEnd}
		   </if>
	       <if test="@Ognl@isNotEmpty(sex)">
				AND sex = #{sex}
			</if>
	       <if test="@Ognl@isNotEmpty(age)">
				AND age = #{age}
			</if>
		</where>
	</sql>
		
    <select id="UserInfo.findPage.count" resultType="long">
        SELECT count(*) FROM user_info 
		<include refid="UserInfo.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 offset,pageSize,lastRows 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="UserInfo.findPage" resultMap="RM.UserInfo">
    	SELECT <include refid="UserInfo.columns" />
	    FROM user_info 
		<include refid="UserInfo.findPage.where"/>
		
		<if test="@Ognl@isNotEmpty(sortColumns)">
			ORDER BY ${sortColumns}
		</if>
    </select>

	
</mapper>

